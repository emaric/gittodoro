{"version":3,"file":"SessionInMemoryStorage.js","sourceRoot":"","sources":["SessionInMemoryStorage.ts"],"names":[],"mappings":";AACA,OAAO,EAAE,QAAQ,EAAE,MAAM,gCAAgC,CAAA;AACzD,OAAO,EAAE,OAAO,EAAE,MAAM,+BAA+B,CAAA;AAEvD;IAGE,gCAAY,OAAkB;QAC5B,IAAI,CAAC,OAAO,GAAG,OAAO,CAAA;IACxB,CAAC;IAED,8CAAa,GAAb,UAAc,IAMb;QACC,IAAM,QAAQ,GAAG,IAAI,QAAQ,uBACxB,IAAI,KACP,EAAE,EAAE,CAAC,CAAC,IACN,CAAA;QACF,IAAM,OAAO,GAAG,IAAI,OAAO,CAAC;YAC1B,EAAE,EAAE,IAAI,CAAC,OAAO,CAAC,MAAM;YACvB,KAAK,EAAE,IAAI,CAAC,KAAK;YACjB,QAAQ,EAAE,QAAQ;SACnB,CAAC,CAAA;QAEF,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,CAAA;QAE1B,OAAO,OAAO,CAAA;IAChB,CAAC;IAED,4CAAW,GAAX,UAAY,KAAW;QACrB,IAAM,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,CAC/B,UAAC,OAAO,IAAK,OAAA,OAAO,CAAC,KAAK,CAAC,OAAO,EAAE,IAAI,KAAK,CAAC,OAAO,EAAE,EAA1C,CAA0C,CACxD,CAAA;QACD,IAAI,CAAC,OAAO,EAAE;YACZ,MAAM,IAAI,KAAK,CAAC,iBAAiB,CAAC,CAAA;SACnC;QACD,OAAO,OAAO,CAAA;IAChB,CAAC;IAED,2CAAU,GAAV,UAAW,GAAS;QAClB,IAAM,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,GAAG,CAAC,CAAA;QACpC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,GAAG,GAAG,GAAG,CAAA;QAC5B,OAAO,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAA;IAC3B,CAAC;IACH,6BAAC;AAAD,CAAC,AA5CD,IA4CC","sourcesContent":["import { SessionDataGatewayInterface } from '@/interactor/data-gateways/SessionDataGatewayInterface'\nimport { Duration } from '@/interactor/entities/Duration'\nimport { Session } from '@/interactor/entities/Session'\n\nexport class SessionInMemoryStorage implements SessionDataGatewayInterface {\n  storage: Session[]\n\n  constructor(storage: Session[]) {\n    this.storage = storage\n  }\n\n  createSession(args: {\n    start: Date\n    pomodoro: number\n    short: number\n    long: number\n    longInterval: number\n  }): Session {\n    const duration = new Duration({\n      ...args,\n      id: -1,\n    })\n    const session = new Session({\n      id: this.storage.length,\n      start: args.start,\n      duration: duration,\n    })\n\n    this.storage.push(session)\n\n    return session\n  }\n\n  readSession(start: Date): Session {\n    const session = this.storage.find(\n      (session) => session.start.getTime() == start.getTime()\n    )\n    if (!session) {\n      throw new Error('Not in storage.')\n    }\n    return session\n  }\n\n  endSession(end: Date): Session {\n    const last = this.storage.length - 1\n    this.storage[last].end = end\n    return this.storage[last]\n  }\n}\n"]}