{"version":3,"file":"db.js","sourceRoot":"","sources":["db.ts"],"names":[],"mappings":";AACA,OAAO,EAAE,QAAQ,EAAE,MAAM,gCAAgC,CAAA;AACzD,OAAO,EAAE,OAAO,EAAE,MAAM,+BAA+B,CAAA;AAEvD;IAGE,yBAAY,OAAkB;QAC5B,IAAI,CAAC,OAAO,GAAG,OAAO,CAAA;IACxB,CAAC;IACD,uCAAa,GAAb,UAAc,IAMb;QACC,IAAM,OAAO,GAAG,IAAI,OAAO,uBACtB,IAAI,KACP,EAAE,EAAE,IAAI,CAAC,OAAO,CAAC,MAAM,EACvB,QAAQ,EAAE,IAAI,QAAQ,uBACjB,IAAI,KACP,EAAE,EAAE,CAAC,CAAC,IACN,IACF,CAAA;QACF,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,CAAA;QAC1B,OAAO,OAAO,CAAA;IAChB,CAAC;IAED,qCAAW,GAAX,UAAY,KAAW;QACrB,IAAM,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,CAC/B,UAAC,OAAO,IAAK,OAAA,OAAO,CAAC,KAAK,CAAC,OAAO,EAAE,IAAI,KAAK,CAAC,OAAO,EAAE,EAA1C,CAA0C,CACxD,CAAA;QAED,IAAI,CAAC,OAAO,EAAE;YACZ,MAAM,IAAI,KAAK,CAAC,YAAY,CAAC,CAAA;SAC9B;QAED,OAAO,OAAO,CAAA;IAChB,CAAC;IAED,oCAAU,GAAV,UAAW,GAAS;QAClB,IAAM,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,GAAG,CAAC,CAAA;QACpC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,GAAG,GAAG,GAAG,CAAA;QAC5B,OAAO,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAA;IAC3B,CAAC;IACH,sBAAC;AAAD,CAAC,AA1CD,IA0CC","sourcesContent":["import { SessionDataGatewayInterface } from '@/interactor/data-gateways/SessionDataGatewayInterface'\nimport { Duration } from '@/interactor/entities/Duration'\nimport { Session } from '@/interactor/entities/Session'\n\nexport class SessionInMemory implements SessionDataGatewayInterface {\n  storage: Session[]\n\n  constructor(storage: Session[]) {\n    this.storage = storage\n  }\n  createSession(args: {\n    start: Date\n    pomodoro: number\n    short: number\n    long: number\n    longInterval: number\n  }): Session {\n    const session = new Session({\n      ...args,\n      id: this.storage.length,\n      duration: new Duration({\n        ...args,\n        id: -1,\n      }),\n    })\n    this.storage.push(session)\n    return session\n  }\n\n  readSession(start: Date): Session {\n    const session = this.storage.find(\n      (session) => session.start.getTime() == start.getTime()\n    )\n\n    if (!session) {\n      throw new Error('Not found.')\n    }\n\n    return session\n  }\n\n  endSession(end: Date): Session {\n    const last = this.storage.length - 1\n    this.storage[last].end = end\n    return this.storage[last]\n  }\n}\n"]}